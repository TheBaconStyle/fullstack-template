/**
 * @packageDocumentation
 * @module api.functional.api.v1.auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection, IPropagation, Resolved } from "@nestia/fetcher";
import typia from "typia";
/**
 * @controller AuthController.authorize
 * @path POST /api/v1/auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function authorize(connection: IConnection, data: authorize.Input): Promise<authorize.Output>;
export declare namespace authorize {
    type Input = {
        sessionToken: string;
    };
    type Output = IPropagation<{
        201: boolean;
    }, 201>;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/api/v1/auth";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
    const random: (g?: Partial<typia.IRandomGenerator>) => Resolved<boolean>;
    const simulate: (connection: IConnection, data: authorize.Input) => Output;
}
